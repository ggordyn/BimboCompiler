%{
#include <stdio.h>
#include <stdlib.h>
%}

%define parse.lac full
%define parse.error verbose

%token BIMBO; 
%token ASSIGNMENT; 
%token INTEGER_VAR;
%token STRING_VAR;
%token TRUE; 
%token FALSE; 
%token REPEAT; 
%token UNTIL; 
%token IF;
%token THENDO;
%token ENDIF;
%token GT;
%token LT;
%token EQ;
%token NE;
%token OR;
%token AND;
%token ASSIGN;
%token NEWLINE;
%token ENDIF;
%token TEXT;
%token PRINT;
%token <string> VARIABLE_NAME;
%token <string> STRING;
%token <number> NUM;
%token END;
%start START;

%union{

  char* string;
  int number;

}
%%
START: BIMBO NEWLINE STATEMENTS FINISH {printf("int main (){");};

FINISH: END {printf("}");};

STATEMENTS: INSTRUCTION STATEMENTS | CONTROL STATEMENTS | ;

INSTRUCTION: DECLARATION NEWLINE 
| DECLARATION ASSIGN_STRING NEWLINE
| DECLARATION ASSIGN_NUM NEWLINE
| VARIABLE_NAME ASSIGN_STRING NEWLINE
| VARIABLE_NAME ASSIGN_NUM NEWLINE
| PRINT NEWLINE;


DECLARATION: CREATE DATATYPE VARIABLE_NAME;

DATATYPE: STRING_VAR | INTEGER_VAR;

CONTROL: IF | DW; 

IF: IF COMPARISON THEN DO STATEMENTS ENDIF;

DW: REPEAT NEWLINE STATEMENTS UNTIL COMPARISON;

COMPARISON: EXPRESSION OPERATOR EXPRESSION 
            | COMPARISON OPERATOR EXPRESSION 
            | EXPRESSION OPERATOR COMPARISON 
            | COMPARISON OPERATOR COMPARISON;

OPERATOR: LT | GT | EQ | NE | AND | OR;

EXPRESSION: EXPRESSION + TERM | EXPRESSION - TERM | TERM | TEXT;

TERM: TERM * FACTOR | TERM / FACTOR | TERM % FACTOR | FACTOR;

FACTOR: VARIABLE | CONSTANT;

CONSTANT: NUM CONSTANT;

DATATYPE:
%%

int yywrap()
{
        return 1;
} 

main() {
    yyparse();
} 
